% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Corpus.R
\docType{class}
\name{Corpus}
\alias{Corpus}
\title{Corpus}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
myCorpus <- Corpus$new(name = "machineLearning", content = mlAdvances)
}
\arguments{
\item{object}{Document Object to be attached (or detached) to or from the Corpus object.}

\item{x}{A Document object, or the name thereto. Used in the detach method.}

\item{path}{Character string designated the relative path to a file.}

\item{io}{Object of the IOStrategy class. This is an optional parameter.
If io is not specified, the default IOStrategy for the file type will
be used. See ?IOStrategy for further assistance.}

\item{key}{Character string or character vector containing the key or
keys associated a metadata field or fields.}

\item{value}{Character string or character vector, equal in length to
the key vector, containing the metadata value or values.}
}
\value{
Corpus object, containing related Document objects.
}
\description{
\code{Corpus} Class for creating, managing, reading and writing Corpus objects.
}
\details{
Corpus objects are collections of Document objects and the primary level
of document aggregation at which document processing, feature engineering,
selection, analysis and modeling occurs.
}
\section{Core Methods}{

 \itemize{
  \item{\code{new()}}{Initializes an object of the Corpus class.}
 }
}

\section{IO Methods}{

 \itemize{
  \item{\code{read(path, io = NULL)}}{Reads an object from a specified
  file using the default or designated IO Strategy. See IOStrategy?
  for details w.r.t. the io parameter. If the IO strategy is not
  indicated, the default io strategy for the file type is used.}
  \item{\code{write(path, io = NULL)}}{Writes an object to a specified
  file using the default or designated IO Strategy. See IOStrategy?
  for details w.r.t. the io parameter. If the IO strategy is not
  indicated, the default io strategy for the file type is used.}
 }
}

\section{Metadata Method}{

 \itemize{
  \item{\code{meta(key = NULL, value = NULL)}}{Provides facility for
  managing an object's metadata represented as key/value pairs in
  a list format. Metadata may be indicated via single key and
  value character strings or by pairs of character vectors. If
  no parameters are passed to the method, then it returns the
  current metadata, as well as system generated application
  and system metadata, in data frame format. If a character
  string or vector is passed via the key parameter, the value
  or values associated with the keys are returned.}
}
}

\examples{

# Instantiate from directory
corpus <- Corpus$new(name = 'corpus', x = "./data")
corpus$summary()

# Instantiate from list of Document objects
blogs <- Document$new(name = 'blogs', x = "./data/en_US.blogs.txt")
news <- Document$new(name = 'news', x = "./data/en_US.news.txt")
twitter <- Document$new(name = 'twitter', x = "./data/en_US.twitter.txt")

corpus <- Corpus$new(name = 'corpus', x = list(blogs, news, twitter))

# Instantiate from Vector: Note this will create subordinate Document
# objects for each element of the Vector.  To create a single document
# for each vector, create the Document objects first, then attach
# to the corpus as above
news <- readLines("./data/en_US.news.txt")
corpus <- Corpus$new(name  = 'news', x = news)

# Attach functionality
newCorpus <- Corpus$new(name = 'newCorpus') # Note, can be instantiated with just the name
newCorpus$attach(blogs, news, twitter) # Must be Document objects.

}
\seealso{
Other Core Classes: \code{\link{Document}},
  \code{\link{Text}}
}
\author{
John James, \email{jjames@datasciencesalon.org}
}
\keyword{datasets}
